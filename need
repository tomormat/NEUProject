# Insert data into Passwords table
passwords_data = [
    ("Email Account", "user1@example.com", "password123", "https://mail.example.com", None, None, now(), None),
    ("Bank Account", "bankuser", "securepass456", "https://bank.example.com", "Primary bank", None, now(), now()),
    ("Social Media", "socialguy", "myp@ssword", None, None, None, now(), None),
    ("Old Forum", "forumuser", "forum1234", "https://oldforum.com", "Rarely used", ten_years_ago(), now(), None)
]

cursor.executemany("""
INSERT INTO Passwords (Name, LoginID, Password, URL, Notes, DeletedDate, CreationDate, ModificationDate)
VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
""", passwords_data)

# Insert data into Certificates table
certificates_data = [
    ("Web Server Cert", "web01", "CERTDATA1", None, None, now(), None),
    ("API Server Cert", "api01", "CERTDATA2", "Used for internal API", None, now(), now()),
    ("Backup Server Cert", "backup01", "CERTDATA3", None, None, now(), None),
    ("Legacy Server Cert", "legacy01", "CERTDATA4", None, ten_years_ago(), now(), None)
]

cursor.executemany("""
INSERT INTO Certificates (Name, ServerName, Certificate, Notes, DeletedDate, CreationDate, ModificationDate)
VALUES (%s, %s, %s, %s, %s, %s, %s)
""", certificates_data)

============================================================================
PART2

1 record to each

cursor.execute("""
INSERT INTO Passwords (`Name`, `LoginID`, `Password`, `URL`, `Notes`, `CreationDate`)
VALUES (%s, %s, %s, %s, %s, %s)
""", ("Test Entry", "test_user", "test_pass", "http://test.com", "Insert test", now))

cursor.execute("""
INSERT INTO Certificates (`Name`, `ServerName`, `Certificate`, `Notes`, `CreationDate`)
VALUES (%s, %s, %s, %s, %s)
""", ("Test Cert", "test_server", "CERTDATA_TEST", "Insert test", now))

conn.commit()
print("✔ Inserted records.")



-------------------------------------------
cursor.execute("""
UPDATE Passwords SET Notes = %s, ModificationDate = %s WHERE ID = (
    SELECT ID FROM (SELECT ID FROM Passwords ORDER BY ID ASC LIMIT 1) AS temp
)
""", ("Updated via script", now))

cursor.execute("""
UPDATE Certificates SET Notes = %s, ModificationDate = %s WHERE ID = (
    SELECT ID FROM (SELECT ID FROM Certificates ORDER BY ID ASC LIMIT 1) AS temp
)
""", ("Updated via script", now))

conn.commit()
------------------------------------------
print("\n Soft deleting one record from each table (sets DeletedDate)...")

cursor.execute("""
UPDATE Passwords SET DeletedDate = %s WHERE ID = (
    SELECT ID FROM (SELECT ID FROM Passwords ORDER BY ID DESC LIMIT 1) AS temp
)
""", (now,))

cursor.execute("""
UPDATE Certificates SET DeletedDate = %s WHERE ID = (
    SELECT ID FROM (SELECT ID FROM Certificates ORDER BY ID DESC LIMIT 1) AS temp
)
""", (now,))

conn.commit()

-------------------------------------------

print("\nPurging records older than 7 years...")

seven_years_ago = (datetime.now() - timedelta(days=365*7)).strftime("%Y-%m-%d %H:%M:%S")

# Purge from Passwords
cursor.execute("""
DELETE FROM Passwords WHERE DeletedDate IS NOT NULL AND DeletedDate < %s
""", (seven_years_ago,))

# Purge from Certificates
cursor.execute("""
DELETE FROM Certificates WHERE DeletedDate IS NOT NULL AND DeletedDate < %s
""", (seven_years_ago,))

deleted_count = cursor.rowcount
conn.commit()
print(f"✔ Purged records deleted (if older than 7 years). Total rows removed: {deleted_count}")

# --- DONE ---
cursor.close()
conn.close()
print("\nAll operations completed.")













==========================================================================================





from flask import Flask, render_template

app = Flask("fix_the_route")


@app.route("/")
def index():
    return render_template("index.html")

@app.route("/services")
def services():
    return render_template("services.html")

@app.route("/costumes/dracula")
def dracula():
    return render_template("dracula.html")

@app.route("/costumes/skeleton")
def skeleton():
    return render_template("skeleton.html")


@app.route("/costumes/<costume>")
def costumes(costume):
    return render_template("costumes.html", costume_name = costume)


if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0")
